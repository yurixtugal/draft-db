// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  
}

model Draft {
  idDraft String @id @default(uuid())
  name String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  icon String @default("database")
  collections Collection[]
 
}

model Collection {
  idCollection String @id @default(uuid())
  name String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  idDraft String
  draft Draft @relation(fields: [idDraft], references: [idDraft])


  fields Field[]

  relationCollectionFrom RelationCollection[] @relation("relationCollectionFrom")
  relationCollectionTo RelationCollection[] @relation("relationCollectionTo")

}

model RelationCollection {
  idRelationCollection String @id @default(uuid())
  nameFieldSingle String?
  descriptionFieldSingle String?
  nameFieldMultiFrom String?
  nameFieldMultiTo String?
  descriptionFieldFrom String?
  descriptionFieldTo String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  idCollectionFrom String
  collectionFrom Collection @relation(fields: [idCollectionFrom], references: [idCollection], name: "relationCollectionFrom")

  idCollectionTo String
  collectionTo Collection @relation(fields: [idCollectionTo], references: [idCollection], name: "relationCollectionTo")

  idTypeRelation String
  typeRelation TypeRelation @relation(fields: [idTypeRelation], references: [idTypeRelation])

}

model Field {
  idField String @id @default(uuid())
  name String
  description String?
  settings Json

  idCollection String
  collection Collection @relation(fields: [idCollection], references: [idCollection])

  idTypeField String
  typeField TypeField @relation(fields: [idTypeField], references: [idTypeField])

}

model TypeField {
  idTypeField String @id @default(uuid())
  name String
  description String?
  staticId String
  mysqlDataType String @default("-")
  postgresDataType String @default("-")


  fields Field[]
 
}

model TypeRelation {
  idTypeRelation String @id @default(uuid())
  name String
  description String?
  staticId String

  relationCollection RelationCollection[]
 
}
